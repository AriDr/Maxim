--[[

███╗░░██╗██╗░██████╗░░██████╗░███████╗██████╗░
████╗░██║██║██╔════╝░██╔════╝░██╔════╝██╔══██╗
██╔██╗██║██║██║░░██╗░██║░░██╗░█████╗░░██████╔╝
██║╚████║██║██║░░╚██╗██║░░╚██╗██╔══╝░░██╔══██╗
██║░╚███║██║╚██████╔╝╚██████╔╝███████╗██║░░██║
╚═╝░░╚══╝╚═╝░╚═════╝░░╚═════╝░╚══════╝╚═╝░░╚═╝

]]--

return {
    ["humanoidrootpart"] = function()
        return game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
    end,
    
    ['returnvalue'] = function(tab, val)
        ok = false
        for i,v in pairs(tab) do
            if string.match(val, v) then
                ok = v
                break
            end
        end
        return ok
    end,

    ["humanoid"] = function() 
        return game:GetService("Players").LocalPlayer.Character.Humanoid
    end,

    ["tween"] = function(time, pos)
        local Distance = (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - pos).Magnitude
        local TweenTime = time * Distance/15
        game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(TweenTime, Enum.EasingStyle.Linear), {CFrame = CFrame.new(pos)}):Play() task.wait(time)
    end,

    ["walkTo"] = function(v3)
       game:GetService("Players").LocalPlayer.Character.Humanoid:MoveTo(v3) 
    end,

    ["isExist"] = function(obj)
        if obj ~= nil then
           return true
        end
    end,

    ["notify"] = function(title, description, duration)
        pcall(function()
            game.StarterGui:SetCore("SendNotification", {
                Title = title;
                Text = description;
                Duration = duration;
            })
        end)
    end,

    ["isSynapse"] = function()
        if syn then
            return true
        else
            return false
        end
    end,

    ['isKrnl'] = function()
        if Krnl then
            return true
        else
            return false
        end
    end,

    ['nickname'] = game.Players.LocalPlayer.Name,

    ['placeid'] = game.PlaceId,

    ['placeversion'] = game.PlaceVersion,

    ['plrico'] = function(userid)
        return "https://www.roblox.com/headshot-thumbnail/image?userId="..userid.."&width=420&height=420&format=png"
    end,

    ['lplrid'] = game.Players.LocalPlayer.UserId,

    ['rmagnitude'] = function(v1, v2)
        return (v1-v2).magnitude
    end,

    ['player'] = game:GetService("Players").LocalPlayer,

    ['camera'] = function()
        return game:GetService("Workspace").Camera
    end,

    ['search'] = {
        ['byName'] = function(a,b)
            for _,v in pairs(a:GetDescendants()) do
                if v.Name == b then
                    return v
                end
            end
            warn("Can't find object")
        end,
        ["byMaterial"] = function(a, b, c)
            pcall(function()
                local size = c
                if c+1-1 == nil or c < 1 or c == nil then
                    size = 1 
                elseif c == 0 then
                    size = math.huge
                end
                for _, v in pairs(a:GetDescendants()) do
                    if v:IsA(b) then
                        local objects = {}
                        table.insert(objects, v)
                        if #objects == size then
                        return objects
                    end
                    end
                end
                warn("Can't find object")
            end)
        end
    },

    ['childTable'] = function(path)
        local rtable = {}
        for _,v in pairs(path:GetChildren()) do
            table.insert(rtable, v)
        end
        return rtable
    end,

    ['generaterandomstring'] = function(a)
        local let = ('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'):split('')
        local string = '' 
        for i = 1, a do 
            string = string..let[math.random(1, #let)]
        end 
        return string 
    end,

    ['request'] = syn and syn.request or http and http.request or http_request or httprequest or request,

    ['pathfindserv'] = game:GetService('PathfindingService'),

    ['toHMS'] = function(t)
        Minutes = (t - t%60)/60
        t = t - Minutes*60
        Hours = (Minutes - Minutes%60)/60
        Minutes = Minutes - Hours*60
        return string.format("%02i", Hours)..":"..string.format("%02i", Minutes)..":"..string.format("%02i", t)
    end,

    ['pathfind'] = function(target)
        local PathfindingService = game:GetService("PathfindingService")
        local Humanoid = game.Players.LocalPlayer.Character.Humanoid
        local Root = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local path = PathfindingService:CreatePath({
            AgentCanJump = true,
            WaypointSpacing = 1
        })
        path:ComputeAsync(Root.Position, target)
        local waypoints = path:GetWaypoints()
        for i, waypoint in ipairs(waypoints) do
            game:GetService("Players").LocalPlayer.Character.Humanoid:MoveTo(waypoint.Position)
            game:GetService("Players").LocalPlayer.Character.Humanoid.MoveToFinished:wait()
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                Humanoid.Jump = true
            end
        end
    end,
}